<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:dwra="http://www.directwebremoting.org/schema/spring-dwr-annotations"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xsi:schemaLocation="
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
                http://www.springframework.org/schema/context 
       			http://www.springframework.org/schema/context/spring-context-2.5.xsd
       			http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd
       			http://www.directwebremoting.org/schema/spring-dwr-annotations http://www.directwebremoting.org/schema/spring-dwr-annotations.xsd
       			http://www.springframework.org/schema/task
       			http://www.springframework.org/schema/task/spring-task.xsd
       			http://www.springframework.org/schema/cache
       			http://www.springframework.org/schema/cache/spring-cache.xsd
       			http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
       			http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd">

	<!-- 引入jdbc.properties属性文件 -->
	<context:property-placeholder
		location="classpath:jdbc.properties,classpath:config.properties" />

	<!--本示例采用DBCP数据源，数据源配置如下 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 初始化连接数 -->
		<property name="initialSize" value="1" />
		<!-- 最大活动连接数 -->
		<property name="maxActive" value="50" />
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="5" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="15" />
		<property name="validationQuery" value="select 1" />
		<property name="testOnBorrow" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnReturn" value="false" />
		<!-- 获取连接超时等待时间(毫秒) -->
		<property name="maxWait" value="60000" />
		<!-- 空闲池空闲连接激活线程的运行间隔时间（毫秒） -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 空闲池中空闲连接能够被激活前的最小空闲时间（毫秒） -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
	</bean>

	<!-- 配置MyBatis的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatisConfig.xml" />
		<!-- 自动扫描com/trigl/mapping目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置. 
			value="classpath:com/trigl/mapping/*.xml" 指的是classpath(类路径)下com.trigl.mapping包中的所有xml文件 
			例如UserMapper.xml位于com.trigl.mapping包下，这样UserMapper.xml就可以被自动扫描 -->
		<property name="mapperLocations" value="classpath:com/trigl/mapping/*.xml" />
	</bean>

	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" />
	</bean>

	<!-- 配置扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描com.trigl.dao这个包以及它的子包下的所有映射接口类，从而代替手工使用SqlSessionDaoSupport或SqlSessionTemplate 
			编写数据访问对象(DAO)的代码,使用动态代理实现 -->
		<property name="basePackage" value="com.trigl.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置Spring的事务管理器 -->
	<bean id="transactionManagerOracle"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManagerOracle" />

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<!-- jedis 配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	<!-- redis服务器中心 -->
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="poolConfig" ref="poolConfig" />
		<property name="port" value="${redis.port}" />
		<property name="hostName" value="${redis.host}" />
		<property name="password" value="${redis.password}" />
		<property name="timeout" value="${redis.timeout}"></property>
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>

	<!-- cache配置 -->
	<bean id="methodCacheInterceptor" class="com.trigl.interceptor.MethodCacheInterceptor">
		<property name="redisUtil" ref="redisUtil" />
	</bean>
	<bean id="redisUtil" class="com.trigl.util.RedisUtil">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>
</beans>
         
         